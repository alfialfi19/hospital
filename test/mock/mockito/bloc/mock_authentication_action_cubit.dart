// Mocks generated by Mockito 5.2.0 from annotations
// in hospital/test/mock/mockito/mockito.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:flutter_bloc/flutter_bloc.dart' as _i5;
import 'package:hospital/common/common.dart' as _i4;
import 'package:hospital/core/core.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBaseLocalStorageClient_0 extends _i1.Fake
    implements _i2.BaseLocalStorageClient {}

class _FakeBaseState_1<T> extends _i1.Fake implements _i2.BaseState<T> {}

class _FakeStreamSubscription_2<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

/// A class which mocks [AuthenticationActionCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationActionCubit extends _i1.Mock
    implements _i2.AuthenticationActionCubit {
  MockAuthenticationActionCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BaseLocalStorageClient get localStorageClient =>
      (super.noSuchMethod(Invocation.getter(#localStorageClient),
              returnValue: _FakeBaseLocalStorageClient_0())
          as _i2.BaseLocalStorageClient);
  @override
  _i2.BaseState<dynamic> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeBaseState_1<dynamic>()) as _i2.BaseState<dynamic>);
  @override
  _i3.Stream<_i2.BaseState<dynamic>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.BaseState<dynamic>>.empty())
          as _i3.Stream<_i2.BaseState<dynamic>>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void signOut({_i4.UserData? userData, bool? isExpired = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #signOut, [], {#userData: userData, #isExpired: isExpired}),
          returnValueForMissingStub: null);
  @override
  void updateUserData({_i4.UserData? userData}) => super.noSuchMethod(
      Invocation.method(#updateUserData, [], {#userData: userData}),
      returnValueForMissingStub: null);
  @override
  _i3.StreamSubscription<_i2.BaseState<dynamic>> listen(
          void Function(_i2.BaseState<dynamic>)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_2<_i2.BaseState<dynamic>>())
          as _i3.StreamSubscription<_i2.BaseState<dynamic>>);
  @override
  void emit(_i2.BaseState<dynamic>? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i5.Change<_i2.BaseState<dynamic>>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
