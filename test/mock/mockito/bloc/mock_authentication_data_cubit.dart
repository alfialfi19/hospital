// Mocks generated by Mockito 5.2.0 from annotations
// in hospital/test/mock/mockito/mockito.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:flutter_bloc/flutter_bloc.dart' as _i5;
import 'package:hospital/common/common.dart' as _i4;
import 'package:hospital/core/core.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAppSetupCubit_0 extends _i1.Fake implements _i2.AppSetupCubit {}

class _FakeBaseLocalStorageClient_1 extends _i1.Fake
    implements _i2.BaseLocalStorageClient {}

class _FakeStreamSubscription_2<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

class _FakeBaseState_3<T> extends _i1.Fake implements _i2.BaseState<T> {}

/// A class which mocks [AuthenticationDataCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationDataCubit extends _i1.Mock
    implements _i2.AuthenticationDataCubit {
  MockAuthenticationDataCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppSetupCubit get appSetupCubit =>
      (super.noSuchMethod(Invocation.getter(#appSetupCubit),
          returnValue: _FakeAppSetupCubit_0()) as _i2.AppSetupCubit);
  @override
  _i2.BaseLocalStorageClient get localStorageClient =>
      (super.noSuchMethod(Invocation.getter(#localStorageClient),
              returnValue: _FakeBaseLocalStorageClient_1())
          as _i2.BaseLocalStorageClient);
  @override
  _i3.StreamSubscription<dynamic> get appSetupCubitSubs =>
      (super.noSuchMethod(Invocation.getter(#appSetupCubitSubs),
              returnValue: _FakeStreamSubscription_2<dynamic>())
          as _i3.StreamSubscription<dynamic>);
  @override
  set appSetupCubitSubs(_i3.StreamSubscription<dynamic>? _appSetupCubitSubs) =>
      super.noSuchMethod(
          Invocation.setter(#appSetupCubitSubs, _appSetupCubitSubs),
          returnValueForMissingStub: null);
  @override
  _i2.BaseState<_i4.UserHospital> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeBaseState_3<_i4.UserHospital>())
          as _i2.BaseState<_i4.UserHospital>);
  @override
  _i3.Stream<_i2.BaseState<_i4.UserHospital>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.BaseState<_i4.UserHospital>>.empty())
          as _i3.Stream<_i2.BaseState<_i4.UserHospital>>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  void initialize() => super.noSuchMethod(Invocation.method(#initialize, []),
      returnValueForMissingStub: null);
  @override
  _i3.StreamSubscription<_i2.BaseState<_i4.UserHospital>> listen(
          void Function(_i2.BaseState<_i4.UserHospital>)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue:
                  _FakeStreamSubscription_2<_i2.BaseState<_i4.UserHospital>>())
          as _i3.StreamSubscription<_i2.BaseState<_i4.UserHospital>>);
  @override
  void emit(_i2.BaseState<_i4.UserHospital>? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i5.Change<_i2.BaseState<_i4.UserHospital>>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
